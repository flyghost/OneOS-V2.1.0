
/**
 ***********************************************************************************************************************
 * Copyright (c) 2021, China Mobile Communications Group Co.,Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with 
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations under the License.
 *
 * @file        onetls.h
 *
 * @brief       onetls header file.
 *
 * @revision
 * Date         Author          Notes
 * 2021-03-16   OneOS Team      First Version.
 ***********************************************************************************************************************
 */

#ifndef __ONETLS_H__
#define __ONETLS_H__
#include "onetls_config.h"
#include "onetls_errcode.h"

#define ONETLS_MODE_TLS  (0)

struct st_onetls_ctx;
typedef struct st_onetls_ctx onetls_ctx;

/* 获取NST的回调函数 */
typedef uint32_t(*onetls_nst_callback)(onetls_ctx *ctx, uint8_t *ticket, uint32_t ticket_len);

/* 获取psk的回调函数 */
typedef uint32_t(*onetls_psk_callback)(const uint8_t *hint, uint32_t hint_len, uint8_t *key, uint32_t max_key_len, 
                                        uint32_t *key_len);

/**
 ***********************************************************************************************************************
 * @brief           获取onetls协议栈版本
 *
 * @param[in]       none
 *
 * @return          char*：当前onetls协议栈版本
 ***********************************************************************************************************************
 */
const char *onetls_version(void);

/**
 ***********************************************************************************************************************
 * @brief           新建会话管理上下文
 *
 * @param[in]       mode：安全通信协议模式，0->TLS；1->DTLS
 *
 * @return          onetls_ctx：会话管理对象指针
 ***********************************************************************************************************************
 */
onetls_ctx *onetls_new_ctx(uint8_t mode);

/**
 ***********************************************************************************************************************
 * @brief           释放会话管理上下文
 *
 * @param[in]       ctx：会话管理对象指针
 *
 * @return          none
 ***********************************************************************************************************************
 */
void onetls_del_ctx(onetls_ctx *ctx);

/**
 ***********************************************************************************************************************
 * @brief           断开握手连接
 *
 * @param[in]       ctx：会话管理对象指针
 *
 * @return          none
 ***********************************************************************************************************************
 */
void onetls_shutdown(onetls_ctx *ctx);


/**
 ***********************************************************************************************************************
 * @brief           绑定socket句柄到会话管理对象
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[in]       recv_fd：接收句柄
 * @param[in]       send_fd：发送句柄
 *
 * @return          none
 ***********************************************************************************************************************
 */
void onetls_set_socket(onetls_ctx *ctx, int recv_fd, int send_fd);


/**
 ***********************************************************************************************************************
 * @brief           配置获取psk密钥的回调
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[in]       cb：获取psk的回调函数
 *
 * @return          none
 ***********************************************************************************************************************
 */
void onetls_set_psk_callback(onetls_ctx *ctx, onetls_psk_callback cb);

/**
 ***********************************************************************************************************************
 * @brief           配置带外psk
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[in]       hint：psk identity
 * @param[in]       hint_len：psk identity长度
 *
 * @return          0：成功；其他：失败
 ***********************************************************************************************************************
 */
uint32_t onetls_set_outband_psk_hint(onetls_ctx *ctx, uint8_t *hint, uint32_t hint_len);

/**
 ***********************************************************************************************************************
 * @brief           发起握手连接
 *
 * @param[in]       ctx：会话管理对象指针
 *
 * @return          0：成功；其他：失败
 ***********************************************************************************************************************
 */
uint32_t onetls_connect(onetls_ctx *ctx);

/**
 ***********************************************************************************************************************
 * @brief           发送早期应用数据
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[in]       out：待发送的数据缓存
 * @param[in]       out_len：待发送的数据长度
 * @param[out]      send_len：实际发送的数据长度指针
 *
 * @return          0：成功；其他：失败
 ***********************************************************************************************************************
 */
uint32_t onetls_send_early_data(onetls_ctx *ctx, const uint8_t *out, uint32_t out_len, uint32_t *send_len);

/**
 ***********************************************************************************************************************
 * @brief           发送应用数据
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[in]       out：待发送的数据缓存
 * @param[in]       out_len：待发送的数据长度
 * @param[out]      send_len：实际发送的数据长度指针
 *
 * @return          0：成功；其他：失败
 ***********************************************************************************************************************
 */
uint32_t onetls_send(onetls_ctx *ctx, const uint8_t *out, uint32_t out_len, uint32_t *send_len);

/**
 ***********************************************************************************************************************
 * @brief           接收应用数据
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[out]      in：接收数据缓存
 * @param[in]       in_len：接收数据缓存长度
 * @param[out]      recv_len：实际接收的数据长度指针
 *
 * @return          0：成功；其他：失败
 ***********************************************************************************************************************
 */
uint32_t onetls_recv(onetls_ctx *ctx, uint8_t *in, uint32_t in_len, uint32_t *recv_len);

/**
 ***********************************************************************************************************************
 * @brief           检测缓冲区是否有数据
 *
 * @param[in]       ctx：会话管理对象指针
 *
 * @return          0：缓冲区空；其他：缓冲区非空，可以读取的数据长度
 ***********************************************************************************************************************
 */
uint32_t onetls_pending(onetls_ctx* ctx);

/**
 ***********************************************************************************************************************
 * @brief           刷新缓冲区
 *
 * @param[in]       ctx：会话管理对象指针
 *
 * @return          0：成功；其他：失败
 ***********************************************************************************************************************
 */
uint32_t onetls_fflush(onetls_ctx* ctx);

/**
 ***********************************************************************************************************************
 * @brief           配置socket超时时间
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[in]       ms：超时时间，毫秒
 *
 * @return          0：成功；其他：失败
 ***********************************************************************************************************************
 */
uint32_t onetls_socket_timeout(onetls_ctx* ctx, uint32_t ms);

/**
 ***********************************************************************************************************************
 * @brief           密钥更新
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[in]       k：更新密钥的方式：0->只发送方向；1->双向
 *
 * @return          0：成功；其他：失败
 ***********************************************************************************************************************
 */
uint32_t onetls_key_update(onetls_ctx* ctx, uint8_t k);

/**
 ***********************************************************************************************************************
 * @brief           设置票据的接收回调
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[in]       cb：回调函数
 *
 * @return          none
 ***********************************************************************************************************************
 */
void onetls_set_nst_callback(onetls_ctx *ctx, onetls_nst_callback cb);

/**
 ***********************************************************************************************************************
 * @brief           设置票据参数
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[in]       ticket：票据数据
 * @param[in]       ticket_len：票据数据长度
 *
 * @return          0：成功；其他：失败
 ***********************************************************************************************************************
 */
uint32_t onetls_set_ticket(onetls_ctx *ctx, const uint8_t *ticket, uint32_t ticket_len);

/**
 ***********************************************************************************************************************
 * @brief           密钥导出
 *
 * @param[in]       ctx：会话管理对象指针
 * @param[in]       label：标签
 * @param[in]       in：输入数据
 * @param[in]       in_len：输入数据长度
 * @param[out]      out：导出密钥数据缓存
 * @param[in]       out_size：导出密钥缓冲区长度
 * @param[out]      out_len：导出密钥数据实际长度
 *
 * @return          0：成功；其他：失败
 ***********************************************************************************************************************
 */
uint32_t onetls_get_export_key(onetls_ctx *ctx, const char *label, const uint8_t *in, uint32_t in_len, uint8_t *out, 
                                uint32_t out_size, uint32_t *out_len);

#endif
