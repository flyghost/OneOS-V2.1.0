#!python3

import re

with open('./addnewmodule/makeqstrdata.py', 'r', encoding='UTF-8') as f:
    exec(f.read())
    f.close()

for module in sys.argv[1:]:
    print(module)
    static_qstr_list.append(module)


def get_qstr_data(qcfgs, qstrs):
    # get config variables
    cfg_bytes_len = int(qcfgs['BYTES_IN_LEN'])
    cfg_bytes_hash = int(qcfgs['BYTES_IN_HASH'])

    # print out the starter of the generated C header file
    qstr_data = '// This file was automatically generated by makeqstrdata.py'+'\n'
    qstr_data += '\n'

    # add NULL qstr with no hash or data
    qstr_data += 'QDEF(MP_QSTRnull, (const byte*)"%s%s" "")' % ('\\x00' *
                                                                cfg_bytes_hash, '\\x00' * cfg_bytes_len)
    qstr_data += '\n'

    # go through each qstr and print it out
    for order, ident, qstr in sorted(qstrs.values(), key=lambda x: x[0]):
        qbytes = make_bytes(cfg_bytes_len, cfg_bytes_hash, qstr)
        qstr_data += 'QDEF(MP_QSTR_%s, %s)' % (ident, qbytes)
        qstr_data += '\n'
    return qstr_data


qcfgs, qstrs = parse_input_headers(['./addnewmodule/qstrdefs.h'])
qstr_data = get_qstr_data(qcfgs, qstrs)

str_add = ''
for module in sys.argv[1:]:
    # qstr_data=r'"\x80\x06" "dengbo"'
    # matchObj=re.match(r'"\\x(\d+)\\x(\d+)" "'+module+'"', qstr_data, re.M | re.I)
    pattern = re.compile(r'"\\x(.+)\\x(.+)" "'+module+'"')    # 查找数字
    result = pattern.findall(qstr_data)
    (num_0, num_1)=result[0]
    str_add += (r'QDEF(MP_QSTR_'+module+r', (const byte*)"\x' + num_0+r'\x'+num_1+r'" "'+module+'")'+'\n')
    print(str_add)


with open('./../../start/include/genhdr/qstrdefs.generated.h', 'a', encoding='UTF-8') as f:
    f.write(str_add)
    f.close()
